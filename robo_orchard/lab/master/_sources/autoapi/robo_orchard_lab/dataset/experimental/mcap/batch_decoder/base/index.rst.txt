base
====

.. py:module:: robo_orchard_lab.dataset.experimental.mcap.batch_decoder.base


Classes
-------

.. autoapisummary::

   robo_orchard_lab.dataset.experimental.mcap.batch_decoder.base.McapBatchDecoder
   robo_orchard_lab.dataset.experimental.mcap.batch_decoder.base.McapBatchDecoderConfig
   robo_orchard_lab.dataset.experimental.mcap.batch_decoder.base.McapBatchDecoders


Module Contents
---------------

.. py:class:: McapBatchDecoder

   Bases: :py:obj:`robo_orchard_core.datatypes.adaptor.ClassInitFromConfigMixin`, :py:obj:`Generic`\ [\ :py:obj:`DST_T`\ ]


   The base class for message batch decoder.

   Different from a message decoder that operates on a single message,
   a message batch decoder is used to decode a batch of messages to a
   specific target format. It usually takes multiple messages from different
   channels, groups them and converts them to a single output format.


   User should implement the `require_topics` and `format_batch`
   methods to specify which topics are required by this decoder and how
   to format the batch of messages as output.

   Template parameters:
       DST_T: The type after decoder, which is the target format of the
           decoded messages.



   .. py:method:: require_topics() -> set[str]
      :abstractmethod:


      Return the set of topics required by this decoder.

      This method is used to determine which topics are required by this
      decoder. It is used to filter out messages that are not relevant to
      this decoder.

      :returns: The set of topics required by this decoder.
      :rtype: set[str]



   .. py:method:: format_batch(decoded_msgs: dict[str, list]) -> DST_T
      :abstractmethod:


      Format the batch of decoded messages to target format.

      :param src: The source batch of messages to format.
      :type src: McapMessageBatch

      :returns: The formatted batch of messages.
      :rtype: McapMessageBatch



   .. py:attribute:: InitFromConfig
      :type:  bool
      :value: True



.. py:class:: McapBatchDecoderConfig

   Bases: :py:obj:`robo_orchard_core.utils.config.ClassConfig`\ [\ :py:obj:`McapBatchDecoderType_co`\ ]


   Configuration class for message batch decoder.


.. py:class:: McapBatchDecoders(decoders: Mapping[str, McapBatchDecoderConfig | McapBatchDecoder])

   Bases: :py:obj:`McapBatchDecoder`\ [\ :py:obj:`dict`\ [\ :py:obj:`str`\ , :py:obj:`Any`\ ]\ ]


   A collection of message batch decoders.


   .. py:attribute:: decoders
      :type:  Mapping[str, McapBatchDecoder]


   .. py:method:: require_topics() -> set[str]

      Return the set of topics required by all decoders in this batch.

      This method aggregates the required topics from all decoders in the
      batch.

      :returns: The set of topics required by all decoders.
      :rtype: set[str]



   .. py:method:: format_batch(decoded_msgs: dict[str, list]) -> dict[str, Any]

      Format the batch of decoded messages to target format.

      :param src: The source batch of messages to format.
      :type src: McapMessageBatch

      :returns: The formatted batch of messages.
      :rtype: McapMessageBatch



   .. py:attribute:: InitFromConfig
      :type:  bool
      :value: True



