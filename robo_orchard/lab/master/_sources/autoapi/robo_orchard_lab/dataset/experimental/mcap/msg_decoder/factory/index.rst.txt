factory
=======

.. py:module:: robo_orchard_lab.dataset.experimental.mcap.msg_decoder.factory


Classes
-------

.. autoapisummary::

   robo_orchard_lab.dataset.experimental.mcap.msg_decoder.factory.DecoderFactoryWithConverter


Module Contents
---------------

.. py:class:: DecoderFactoryWithConverter(decoder_factories: Iterable[mcap.decoder.DecoderFactory] | None = None, converters: Mapping[str, robo_orchard_lab.dataset.experimental.mcap.msg_converter.MessageConverterConfig[robo_orchard_lab.dataset.experimental.mcap.msg_converter.MessageConverter]] | None = None)

   Bases: :py:obj:`mcap.decoder.DecoderFactory`


   Decoder factory that can convert messages to different formats.

   This class wraps an existing decoder factory and allows for
   message conversion using the provided converters. It is used to
   create decoders that can handle different message formats and
   convert them to a common format for further processing.


   :param decoder_factories: A list of decoder factories to use for decoding messages.
                             The first factory that can decode the message will be used.
                             If None, the default factories for protobuf and ROS2 messages
                             will be used if available. Defaults to None.
   :type decoder_factories: Iterable[McapDecoderFactory] | None, optional
   :param converters: A mapping of schema names to message converter configurations.
                      If None, no conversion will be performed.
   :type converters: Mapping[str, MessageConverterConfig[MessageConverter]] | None


   .. py:attribute:: decoder_factories
      :value: None



   .. py:attribute:: converter_factory


   .. py:method:: decoder_for(message_encoding: str, schema: mcap.records.Schema | None) -> Callable[[bytes], Any] | None

      If the message encoding and schema arguments can be decoded by this decoder factory,
      returns a callable to decode message bytes.



