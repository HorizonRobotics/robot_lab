decoder_ctx
===========

.. py:module:: robo_orchard_lab.dataset.experimental.mcap.msg_decoder.decoder_ctx


Classes
-------

.. autoapisummary::

   robo_orchard_lab.dataset.experimental.mcap.msg_decoder.decoder_ctx.McapDecoderContext


Module Contents
---------------

.. py:class:: McapDecoderContext(decoder_factories: Iterable[mcap.decoder.DecoderFactory] = ())

   Mcap decoder with context for managing decoders.

   This class separates the decoding logic from `mcap.reader.McapReader`,
   allowing for a more flexible  approach to decoding messages. Users can
   explicitly reset the context to clear all cached decoders.



   .. py:method:: reset() -> None

      Reset the decoder context, clearing all cached decoders.



   .. py:method:: decode_message(message_encoding: str, message: mcap.records.Message, schema: Optional[mcap.records.Schema]) -> Any

      Decode a message using the appropriate decoder.

      This method retrieves the decoder for the given message by channel_id
      and uses it to decode the message data. If no decoder is found for the
      specified channel_id, it iterates through the registered decoder
      factories to find a suitable decoder based on the message encoding
      and schema.

      .. note::

         The decoder is cached in the context for each message channel. This
         allows the decoder to be stateful for cases like video decoding,
         where the decoder may maintain internal state across multiple
         messages on the same channel.

      :param message_encoding: The encoding type of the message.
      :type message_encoding: str
      :param message: The message to decode.
      :type message: McapMessage
      :param schema: The schema associated with the message,
                     or None if no schema is available.
      :type schema: Optional[Schema]

      :returns: The decoded message data.
      :rtype: Any



