env
===

.. py:module:: robo_orchard_lab.utils.env


Functions
---------

.. autoapisummary::

   robo_orchard_lab.utils.env.set_env


Module Contents
---------------

.. py:function:: set_env(*remove, **update)

   Temporarily sets, updates, or removes environment variables.

   This context manager allows for modifying environment variables only within
   the scope of a `with` statement. Upon exiting the `with` block,
   the original state of all affected environment variables is restored.

   Environment variables specified in the `update` keyword arguments are
   set to the provided values. Environment variables named in the `remove`
   positional arguments are unset.

   If a variable name appears in both `update` and `remove`, it will be
   updated first and then immediately removed, meaning it will be unset
   during the execution of the `with` block. Upon exit, its original
   value (or absence) before entering the context will be restored.

   All values provided for updates should be strings, as environment
   variables can only store strings. While `os.environ.update` might
   attempt to convert non-string values, it's best practice to
   provide strings.

   This implementation is inspired by a solution discussed on Stack Overflow:
   https://stackoverflow.com/questions/2059482/what-is-a-good-way-to-handle-temporary-changes-to-os-environ

   :param \*remove: Variable positional arguments representing the names
                    of environment variables to be temporarily removed (unset).
   :type \*remove: str
   :param \*\*update: Arbitrary keyword arguments where keys are environment
                      variable names (str) and values are the string values to
                      set them to temporarily.
   :type \*\*update: str

   :Yields: *None* -- This context manager does not yield a specific value.

   .. rubric:: Example

   >>> os.environ["MY_VAR"] = "initial_value"
   >>> os.environ["TO_DELETE"] = "delete_me"
   >>>
   >>> with set_env(
   ...     "TO_DELETE",
   ...     "NON_EXISTENT_TO_DELETE",
   ...     MY_VAR="new_value",
   ...     NEW_VAR="created",
   ... ):
   ...     print(f"MY_VAR: {os.environ.get('MY_VAR')}")
   ...     print(f"NEW_VAR: {os.environ.get('NEW_VAR')}")
   ...     print(f"TO_DELETE: {os.environ.get('TO_DELETE')}")
   ...     print(
   ...         f"NON_EXISTENT_TO_DELETE: {os.environ.get('NON_EXISTENT_TO_DELETE')}"
   ...     )
   MY_VAR: new_value
   NEW_VAR: created
   TO_DELETE: None
   NON_EXISTENT_TO_DELETE: None
   >>>
   >>> print(f"MY_VAR after: {os.environ.get('MY_VAR')}")
   MY_VAR after: initial_value
   >>> print(f"NEW_VAR after: {os.environ.get('NEW_VAR')}")
   NEW_VAR after: None
   >>> print(f"TO_DELETE after: {os.environ.get('TO_DELETE')}")
   TO_DELETE after: delete_me
   >>>
   >>> # Cleanup example variables
   >>> del os.environ["MY_VAR"]
   >>> del os.environ["TO_DELETE"]


